import requests
import json
import argparse

users = {}
rooms = {}

def getCurrentUser(url, token):
    print("[+] Obtaining information about current user ...")
    url = url + "/account"
    headers = {"Authorization" : "Bearer {token}".format(token=token)}
    resp = requests.get(url, headers=headers).json()
    current_user_id = resp['id']
    current_user_username = resp['username']
    current_user_display_name = resp['displayName']
    current_user_first_name = resp['firstName']
    current_user_last_name = resp['lastName']
    current_user_rooms = ",".join(resp['openRooms'])
    print("    User Id: {id}".format(id=current_user_id))
    print("    Username: {username}".format(username=current_user_username))
    print("    Display Name: {displayname}".format(displayname=current_user_display_name))
    print("    First Name: {firstname}".format(firstname=current_user_first_name))
    print("    Last Name: {lastname}".format(lastname=current_user_last_name))
    print("    Rooms: {rooms}".format(rooms=current_user_rooms))
    return current_user_id

def getAllUsers(url, token):
    current_user_id = getCurrentUser(url, token)
    print("[+] Obtaining user information...")
    url = url + "/users"
    headers = {"Authorization" : "Bearer {token}".format(token=token)}
    resp = requests.get(url, headers=headers).json()
    for x in resp:
        if x['id'] == current_user_id:
            users[x['id']] = x['username']
            continue
        else:
            users[x['id']] = x['username']
            user_id = x['id']
            username = x['username']
            display_name = x['displayName']
            first_name = x['firstName']
            last_name = x['lastName']
            rooms = ",".join(x['openRooms'])
            print("    [*] Obtaining information about {username}".format(username=username))
            print("        User Id: {id}".format(id=user_id))
            print("        Username: {username}".format(username=username))
            print("        Display Name: {displayname}".format(displayname=display_name))
            print("        First Name: {firstname}".format(firstname=first_name))
            print("        Last Name: {lastname}".format(lastname=last_name))
            print("        Rooms: {rooms}".format(rooms=rooms))
    return users

def getRooms(url, token):
    url = url + "/rooms"
    headers = {"Authorization" : "Bearer {token}".format(token=token)}
    resp = requests.get(url, headers=headers).json()
    print("[+] Obtaining room information....")
    for x in resp:
        name = x['name']
        id = x['id']
        owner = users[x['owner']]
        private = x['private']
        hasPassword = x['hasPassword']
        participants = x['participants']
        print("    [*] Obtaining room details for {name}".format(name=name))
        print("        Room Name: {name}".format(name=name))
        print("        Room Id: {id}".format(id=id))
        print("        Room Owner: {owner}".format(owner=owner))
        print("        Room set to private: {private}".format(private=private))
        print("        Room password set: {hasPassword}".format(hasPassword=hasPassword))
        rooms[x['id']] = x['name']

def getChatMessages(url, token):
    print("[+] Obtaining Chat Information...")
    headers = {"Authorization" : "Bearer {token}".format(token=token)}
    for key,value in rooms.items():
        room_name = value
        room_id = key
        print("    [*] Obtaining messages for {room_name} room".format(room_name=room_name))
        new_url = url + "/rooms/{room_id}/messages".format(room_id=room_id)
        resp = requests.get(new_url, headers=headers).json()
        for x in resp:
            sender = users[x['owner']]
            message = x['text']
            print("        {text}: sent by {sender}".format(text=message, sender=sender))

def main(url, token):
    getAllUsers(url, token)
    getRooms(url, token)
    getChatMessages(url, token)
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', help='Lets Chat url')
    parser.add_argument('-t', '--token', help='Lets Chat token')
    args = parser.parse_args()
    url = ''
    if str(args.url[-1]) == '/':
        url = str(args.url[:-1])
    else:
        url = str(args.url)
    main(url, args.token)
